<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>OddWebsite</title><description>Hi, I'm Michael, a ðŸ’» programmer, ðŸŽ¸ music lover, and ï£¿ enthusiast.</description><link>https://oddmagnet.github.io</link><language>en</language><lastBuildDate>Tue, 1 Sep 2020 15:03:08 +0200</lastBuildDate><pubDate>Tue, 1 Sep 2020 15:03:08 +0200</pubDate><ttl>250</ttl><atom:link href="https://oddmagnet.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://oddmagnet.github.io/blog/On%20being%20lazy%20(lazy%20loading%20in%20Swift)</guid><title>On being lazy (lazy loading in Swift)</title><description>Lazy Loading in Swift.</description><link>https://oddmagnet.github.io/blog/On%20being%20lazy%20(lazy%20loading%20in%20Swift)</link><pubDate>Tue, 1 Sep 2020 15:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>On being lazy (lazy loading in Swift)</h1><p>It has been quite a while since my last post, so why not make a post about laziness, or rather lazy loading?</p><h2>What it means to be lazy</h2><p>Imagine you have some computed property that you may or may not be used when your app is running and if it's used it might only be used a few times or a lot of times.<br>Now imagine that computed property taking a lot of computational power.<br>Calculating and storing it right away, that would be useful if the property gets used a lot, but a waste of cpu when it never gets used. Calculating it every time instead of storing it would be just as wasteful if it was used a lot.<br>To remedy this, the <code>lazy</code> keyword is used, that way the property can be calculated and stored, but that will only happen once it's accessed the first time.</p><h3>Computed properties</h3><p>For computed properties it's as simple as adding the lazy keyword in front and adding parenthesis at the end of the closure that follows the computed property.<br>Why parenthesis? I think this is best explained by an example, let's imagine a simple class like:</p><pre><code><span class="keyword">class</span> Person {
	<span class="keyword">let</span> name: <span class="type">String</span>
 
	<span class="keyword">init</span>(name: <span class="type">String</span>) {
		<span class="keyword">self</span>.<span class="property">name</span> = name
	}
	
	<span class="keyword">lazy var</span> favoriteFood = {
		<span class="keyword">return</span> <span class="string">"Burgers"</span>
	}()
	
	<span class="keyword">lazy var</span> favoriteDrink = {
		<span class="keyword">return</span> <span class="string">"Orange Juice"</span>
	}
}

<span class="keyword">let</span> oddmagnet = <span class="type">Person</span>(name: <span class="string">"OddMagnet"</span>)
</code></pre><p>The now let's use those lazy computed properties, <code>print(oddmagnet.favoriteFood)</code> would print <code>Burgers</code>, while <code>print(oddmagnet.favoriteDrink)</code> would print <code>(Function)</code>.<br>In other words, without the parenthesis a function is assigned to the property instead of just a value.</p><h4>Static properties</h4><p>On the topic of properties I think it's worth a quick mention that static properties are lazy by default.</p><pre><code><span class="keyword">class</span> Food {
	<span class="comment">/* some code omitted for brevity */</span>
	<span class="keyword">static let</span> localizedName = <span class="type">GetLocalization</span>(for name)
}
</code></pre><p>In this example the <code>localizedName</code> would only be created once it's accessed the first time.<br><em>(This is not an ideal example, since the language settings in the device change and there are much better options for localisation, but I hope it gets the point across)</em></p><h3>Methods</h3><p>Most people like to structure their code, like separating properties and methods, but lazy properties are a weird middle-ground. Luckily this is very easy to fix, by simply using a method call to assign a value to the computed property instead of giving it a closure.</p><pre><code><span class="keyword">class</span> Person {
	<span class="comment">/* some code omitted for brevity */
	// MARK: - Properties</span>
	<span class="keyword">lazy var</span> favoriteFood = <span class="keyword">self</span>.<span class="call">getFavoriteFood</span>()
	
	<span class="comment">// MARK: - Methods</span>
	<span class="keyword">private func</span> getFavoriteFood() -&gt; <span class="type">String</span> {
		<span class="keyword">return</span> <span class="string">"Burgers"</span>
	}
}	
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://oddmagnet.github.io/blog/Some%20notes%20on%20pattern%20matching%20in%20Swift</guid><title>Some notes on pattern matching in Swift</title><description>Some notes on pattern matching in Swift.</description><link>https://oddmagnet.github.io/blog/Some%20notes%20on%20pattern%20matching%20in%20Swift</link><pubDate>Sun, 9 Aug 2020 15:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>Some notes on pattern matching in Swift</h1><p>When using pattern matching in Swift most tasks can be accomplished with the basics, sometimes there are ways for a more succinct solutions and in a few cases the basics won't suffice.<br>In this post I'm going over a few things I learned that I personally would classify as intermediate to advanced pattern matching.</p><h2>Tuples</h2><p>Even though I rarely use tuples, the idea of using them in pattern matching is quite interesting to me.<br>Since it's possible to ignore parts of a tuple, code like this is possible:</p><pre><code><span class="keyword">let</span> tuple = (artist: <span class="string">"Metallica"</span>, album: <span class="string">"Master of Puppets"</span>)

<span class="keyword">switch</span> tuple {
	<span class="keyword">case</span> (<span class="string">"Metallica"</span>, <span class="string">"Master of Puppets"</span>):
		<span class="call">print</span>(<span class="string">"This album was released in 1986"</span>)
	<span class="keyword">case</span> (<span class="string">"Metallica"</span>, <span class="keyword">_</span>):
		<span class="call">print</span>(<span class="string">"Metallica's first album was released in 1983, their latest in 2016"</span>)
	<span class="keyword">case</span> (<span class="keyword">_</span>, <span class="string">"St. Anger"</span>):
		<span class="call">print</span>(<span class="string">"This Metallica album was released in 2003)</span>
}
</code></pre><p>Additionally tuples can also be used with computed values, e.g. the classic <em>FizzBuzz</em> challenge can be solved like this:</p><pre><code><span class="keyword">switch</span> (input % <span class="number">3</span> == <span class="number">0</span>, input % <span class="number">5</span> == <span class="number">0</span>) {
	<span class="keyword">case</span> (<span class="keyword">true</span>, <span class="keyword">false</span>):
		<span class="call">print</span>(<span class="string">"Fizz"</span>)
	<span class="keyword">case</span> (<span class="keyword">false</span>, <span class="keyword">true</span>):
		<span class="call">print</span>(<span class="string">"Buzz"</span>)
	<span class="keyword">case</span> (<span class="keyword">true</span>, <span class="keyword">true</span>):
		<span class="call">print</span>(<span class="string">"FizzBuzz"</span>)
} 
</code></pre><h2>Ranges</h2><p>More often than not when I see ranges in pattern matching it looks something like this:</p><pre><code><span class="keyword">if</span> <span class="number">1980</span>..&lt;<span class="number">2000</span> = year { ... }
</code></pre><p>Which is sad, because since the above creates an instance of the <strong>Range</strong> type, it also has access to it's methods, which makes code like this possible:</p><pre><code><span class="keyword">let</span> year = <span class="number">1992</span>

<span class="keyword">switch</span> year {
	<span class="keyword">case</span> (<span class="number">1946</span>..&lt;<span class="number">1965</span>).<span class="call">containts</span>(year):
		<span class="call">print</span>(<span class="string">"You're a baby boomer"</span>)
	<span class="keyword">case</span> (<span class="number">1965</span>..&lt;<span class="number">1980</span>).<span class="call">containts</span>(year):
		<span class="call">print</span>(<span class="string">"You're a Gen X'er"</span>)
	<span class="keyword">case</span> (<span class="number">1980</span>..&lt;<span class="number">1995</span>).<span class="call">containts</span>(year):
		<span class="call">print</span>(<span class="string">"You're a Millenial"</span>)
}
</code></pre><p>This becomes even more useful when used in combination with associated values of an Enum:</p><pre><code><span class="keyword">enum</span> MusicType {
	<span class="keyword">case</span> headphones
	<span class="keyword">case</span> speakers
	<span class="keyword">case</span> live(audienceLoudness: <span class="type">Int</span>)
}

<span class="keyword">let</span> concert = <span class="type">MusicType</span>.<span class="call">live</span>(audienceLoudness: <span class="number">100</span>)

<span class="keyword">switch</span> concert {
	<span class="keyword">case</span> .<span class="dotAccess">headphones</span>:
		<span class="call">print</span>(<span class="string">"Keeping it to yourself"</span>)
	<span class="keyword">case</span> .<span class="dotAccess">speakers</span>:
		<span class="call">print</span>(<span class="string">"Listening with friends"</span>)
	<span class="keyword">case</span> .<span class="dotAccess">concert</span>(<span class="keyword">let</span> loudness) <span class="keyword">where</span> (<span class="number">1</span>..&lt;<span class="number">30</span>).<span class="call">contains</span>(loudness):
		<span class="call">print</span>(<span class="string">"A pretty lousy concert"</span>)
	<span class="keyword">case</span> .<span class="dotAccess">concert</span>(<span class="keyword">let</span> loudness) <span class="keyword">where</span> (<span class="number">30</span>..&lt;<span class="number">60</span>).<span class="call">contains</span>(loudness):
		<span class="call">print</span>(<span class="string">"A decent concert"</span>)
	<span class="keyword">case</span> .<span class="dotAccess">concert</span>(<span class="keyword">let</span> loudness) <span class="keyword">where</span> (<span class="number">60</span>..&lt;<span class="number">80</span>).<span class="call">contains</span>(loudness):
		<span class="call">print</span>(<span class="string">"A great concert"</span>)
	<span class="keyword">case</span> .<span class="dotAccess">concert</span>(<span class="keyword">let</span> loudness) <span class="keyword">where</span> (<span class="number">80</span>...<span class="number">100</span>).<span class="call">contains</span>(loudness):
		<span class="call">print</span>(<span class="string">"One of the best concerts ever"</span>)
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://oddmagnet.github.io/blog/Xcode%20Commands%20and%20Tipps</guid><title>Xcode Commands and Tipps</title><description>Some notes on commands in Xcode and some tipps.</description><link>https://oddmagnet.github.io/blog/Xcode%20Commands%20and%20Tipps</link><pubDate>Sat, 8 Aug 2020 19:15:00 +0200</pubDate><content:encoded><![CDATA[<h1>Xcode Commands and Tipps</h1><p>After the last post - Debugging - I think having a post about lesser known commands and some tipps is a good fit, so here are some of the things that I consider useful to know.</p><h2>Searching and opening files</h2><p>Projects get big over time, especially if code is well encapsulated and views are kept small, for those who don't memorise the content and location of every single file, this command will be useful.<br><code>âŒ˜â‡§O</code> will open a search box that uses the same fuzzy matching that is also used for code completion.<br>This means that typing something like <code>somevc</code> will match <code>someUsefulViewController</code>. Additionally this can be used to quickly take a look into Apple's own classes.<br><br>Sadly the above command does not reveal the file in the project navigator, for this <code>âŒ˜â‡§J</code> can be used.</p><p>Now that the file is located, maybe you want to open it in a new windows? Or maybe a tab? Or the Assistant Editor? By holding <code>âŒ¥â‡§</code> while clicking the file a popup will appear which offers the options mentioned above for opening the file.</p><h2>Editing Files</h2><p>This is probably the section that most people already know, so it's more for new Xcode users.</p><p><code>âŒ˜/</code> comments/uncomments the current line (or selection if applicable).<br><code>âŒ˜[</code> and <code>âŒ˜]</code> indent and outdent the selected code respectively.<br><code>âŒƒI</code> automatically correctly indents the selected code.</p><p>The least known thing in this section is likely the <code>âŒ¥âŒ˜/</code> command, which adds a template for documentation before the current function.<br><strong>Note:</strong> this command is problematic for the german keyboard layout since <code>/</code> and <code>\ </code> both use the <code>7</code> key, one just adds the <code>âŒ¥</code> modifier in addition to the <code>â‡§</code> modifier.</p><h2>Finding information</h2><p>Above I wrote above quickly opening Apple's own files to take a look at classes and function, but there are a few more ways to get that information.</p><p>Selecting something while the <strong>Quick Help Inspector</strong> is visible (<code>âŒ¥âŒ˜3</code>) will show useful information in it.</p><p>The same information can be viewed by clicking something while holding <code>âŒ¥</code>.</p><p>Finally, there are 4 ways to jump to the definition of something: 1. Right clicking and choosing <em>Jump to definition</em> 2. Clicking while holding <code>âŒ˜</code>, then choosing <em>Jump to definition</em> 3. Clicking while holding <code>âŒƒâŒ˜</code> will directly jump to the definition 4. Pressing <code>âŒƒâŒ˜J</code> with something selected will also jump to the definition</p><h2>Jump Bar and Markers</h2><p>Right above the code is the jump bar, which usually shows the path to the current file as well as the current method you're in. When clicked it opens up to show all folders at the clicked level, or when the last level is clicked all the functions inside the current file.<br>Sometimes however this can be quite a long list, luckily it's easily searchable by just typing after opening it.<br>Alternatively <code>âŒƒ6</code> will open the jump bar at the final level.</p><p>One thing I really like about the jump bar is that it shows markers placed in the file. Markers are comments that follow a special syntax.<br><code>// MARK: yourTextHere</code> will place a marker in the jump bar that is name <em>yourTextHere</em></p><p>It's possible to add separators to the jump bar by adding a <code>-</code> before or after the marker name, or just use it as a standalone separator.<br><code>// MARK: - separatorBefore</code><br><code>// MARK: separatorAfter -</code><br><code>// MARK: -</code><br>This is most useful for visually grouping functionality in the jump bar, or when use the separator before and after to mark a long section in the jump bar.</p><p>Aside from just the <code>MARK</code> keyword there's also<br><code>// TODO: some todo reminder</code><br>and<br><code>// FIXME: some bug reminder</code></p><h2>Cleaning and Breakpoints</h2><p>When a Xcode suddenly can't build the project anymore, especially when there are no errors/warning, it's worth a try using <code>â‡§âŒ¥âŒ˜K</code>. This command cleans the build folder so that Xcode really builds the project from scratch again.</p><p>The project compiling sadly doesn't mean that there are no bugs, to help find them here are some useful commands.<br><code>âŒ¥âŒ˜/</code> places a breakpoint on the current line.<br><code>âŒ˜Y</code> toggles all breakpoints globally.<br>Additionally, right clicking a breakpoint allows for adding information, e.g. a condition for the breakpoints or some sort of action, like executing a LLDB command in the console.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oddmagnet.github.io/blog/Splash%20Test</guid><title>Splash Test</title><description>A test of the splash plugin for publish.</description><link>https://oddmagnet.github.io/blog/Splash%20Test</link><pubDate>Fri, 31 Jul 2020 17:10:00 +0200</pubDate><content:encoded><![CDATA[<h1>Splash Test</h1><p>Just some Swift code to test out the Splash plugin, which should highlight the below code.</p><pre><code><span class="keyword">struct</span> Address {
	<span class="keyword">let</span> street: <span class="type">String</span>
	<span class="keyword">let</span> city: <span class="type">String</span>
	<span class="keyword">let</span> zip: <span class="type">Int</span>
}

<span class="keyword">struct</span> Student: <span class="type">Person</span> {
	<span class="keyword">let</span> id = <span class="type">UUID</span>()
	<span class="keyword">let</span> name: <span class="type">String</span>
	<span class="keyword">let</span> age: <span class="type">Int</span>
	<span class="keyword">let</span> address: <span class="type">Address</span>
}

<span class="keyword">let</span> address = <span class="type">Address</span>(street: <span class="string">"1 Apple Park Way"</span>, city: <span class="string">"Cupertino"</span>, zip: <span class="number">95014</span>)

<span class="keyword">let</span> student = <span class="type">Student</span>(name: <span class="string">"Tim Cook"</span>, age: <span class="number">59</span>, address: address)
</code></pre><p>Some more normal text</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oddmagnet.github.io/blog/Debugging</guid><title>Debugging Techniques</title><description>Some notes on debugging techniques.</description><link>https://oddmagnet.github.io/blog/Debugging</link><pubDate>Fri, 31 Jul 2020 13:52:00 +0200</pubDate><content:encoded><![CDATA[<h1>Debugging Techniques</h1><p>A collection of some techniques that I learned over time, so far.</p><h2>Print Statements</h2><p>I don't think there's much to write about these. Everybody has used them at some point and whoever says they never did is lying. It's not the worst possible way of debugging, certainly better than just staring at the code, but there are more efficient ways.</p><h2>Watching Variables</h2><p>When a variable crashes the app and you don't know why, it's often a good idea to watch it while debugging. Luckily this doesn't need to be done manually, after setting a breakpoint and running the code Xcode will show an overview of variables in the debug area, simply right-clicking a variable and selecting <code>Watch VariableName</code> is enough.</p><p>In the <em>Breakpoint Navigator</em> (<code>âŒ˜8</code>) you'll then not only see the breakpoints you set, but also the <em>Watchpoints</em>, the variables Xcode is watching. When continuing with the apps execution Xcode will not only stop at breakpoints, but every time the watched variable changes and show exactly what changed.</p><p>Once Xcode stop at a point where the variable changed to an unexpected value - and likely shows the rather unhelpful assembly code -, the <em>Debug Navigator</em> (<code>âŒ˜7</code>) can be used to navigate through the function calls and find the bug.</p><p>Compared to print statements it's much easier to watch a variable once and just check the function where it's value got changed unexpectedly instead of placing prints everywhere.</p><h2>Exception Breakpoints</h2><p>Sometimes code crashes and we're left nowhere close to the code we actually wrote and we need scroll up in the debug output, past all the stuff that doesn't tell us anything, to get to the point where the error actually happened.</p><p>In the <em>Breakpoint Navigator</em>, using the '+' symbol in the bottom left, an <em>Exception Breakpoint</em> can be created, this sort of breakpoint will stop the execution of the code as soon as an exception is thrown, which means the execution doesn't go through to the crash.</p><p>The debug area might still now show helpful output, going back into the <em>Debug Navigator</em> and selecting the last function call, then entering <code>po $arg1</code> in the console window will print the objective-c description of an object, in this case the error message that was previously shown at the top of a very, very long output in the console.</p><p>Since this is such a common scenario, it's possible to edit the breakpoint and add an action, that does exactly that, execute the command from above in the console when the breakpoint is hit. Even more, it's possible to right-click it and choose <em>Move to</em> followed by selecting <em>User</em>, which will make the breakpoint available in all projects, not just the current one.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oddmagnet.github.io/blog/100Days</guid><title>100 Days of Swift UI</title><description>An overview of my experience with the 100 Days of SwiftUI challenge.</description><link>https://oddmagnet.github.io/blog/100Days</link><pubDate>Thu, 30 Jul 2020 14:26:00 +0200</pubDate><content:encoded><![CDATA[<h1>100 Days of Swift UI</h1><h2>Introduction</h2><p>This section was mostly centered on learning the basics of the Swift programming language, for the most part my experience with other programming languages translated over to Swift. Notable exceptions were Optionals and the way Protocols and Extensions are used in Swift</p><h2>Starting SwiftUI</h2><p>While I learned a bit of iOS programming as a hobby, that was mostly centered on UIKit, so the section was the first time I really learned more about SwiftUI, the main focus was on learning basic view types like <strong>Stacks</strong>, <strong>NavigationView</strong>, <strong>Forms</strong> and how to make use of the concept that views are a function of their state.</p><p>Other important aspects were how to use <strong>buttons</strong>, showing <strong>alerts</strong>. In the technique project I learned more about how views and viewmodifiers work under the hood, why structs are used for most things and why 'some View' is used so much</p><h2>Expanding your skills</h2><p>After the first section I was able to easily create basic UI's and now this section focused on expanding my knowledge of all the views SwiftUI offers, in this section I learned about <strong>Stepper</strong>, <strong>DatePicker</strong> and <strong>List</strong> views, got to know a bit of machine learning with <strong>Create ML</strong> and learned how to work with dates in Swift.</p><p>Additionally I got more practice with <strong>@State</strong>, <strong>Alert</strong> and <strong>NavigationView</strong> and also learned how to load resources from the bundle, in the technique project I learned about animations and how easy it can be to animate changes in state</p><h2>Scaling up to bigger apps</h2><p>After the last two sections I was able to create simple apps that can do simple things in a short time, now this chapter focused on the things that are needed to create bigger apps, amongst other things a new form of sharing state with <strong>@ObservedObject</strong>, how to show/hide views, delete items from lists, storing user settings and archiving objects.</p><p>I also got more in-depth knowledge of why <strong>@State</strong> only works with structs, how to work with hierachical Codable data and how to push views on the navigation stack and learned about <strong>GeometryReader</strong>, <strong>ScrollView</strong> and how to create custom <strong>Paths</strong> and <strong>Shapes</strong> in SwiftUI.</p><h2>Focus on data</h2><p>The focus of this section, like the title says, was on data, sending and receiving it, and using <strong>Core Data</strong> with SwiftUI, here I learned how to add <strong>Codable</strong> conformance to <strong>@Published</strong> properties, using <strong>URLSession</strong> to receive and send data, about <strong>@FetchRequest</strong>, how to sort and filter those requests and how to delete data, how to create custom <strong>NSManagedObject</strong> subclasses, using constraints and relationships.</p><p>Additionally I practiced using more custom components, size classes and type erasure</p><h2>Views and View controllers</h2><p>After getting a grasp on how to handle data, the focus went back to views and their controllers, in this section I learned about custom bindings, <strong>ActionSheet</strong>, wrapping <strong>UIViewController</strong> in SwiftUI views and using <strong>coordinators</strong> to manage them, how to save and import images from the photo library and filter them with <strong>Core Image</strong>, adding <strong>Comparable</strong> to custom types, writing to the documents directory, switching view states with enums, using <strong>MapKit</strong>, Touch/Face ID and extending existing types to support <strong>ObservableObject</strong>.</p><p>In the technique project I learned about accessibility, how to identify views, hide and group accessibility data and reading the value of controls</p><h2>Controlling UI Flow</h2><p>The more views there are, the more need for a good UI flow there is, this section taught me how to create and use <strong>TabViews</strong>, using <strong>@EnvironmentObject</strong>, adding <strong>context menus</strong>, scheduling notifications and adding package dependencies, understanding how the <strong>Result</strong> type works, how to manually push <strong>ObservableObject</strong> changes, dynamically filtering a list, using <strong>gestures</strong> and haptic feedback with <strong>Core Haptics</strong>.</p><p>Furthermore I learned about disabling user interactiviy, <strong>Timers</strong>, getting notified when the app changes to back-/foreground and how to support specific accessibility needs.</p><p>For the technique project I learned how layout works in SwiftUI, how to use and create alignment guides and how GeometryReader works and can be used to easily create nice effects.</p><h2>One last project</h2><p>For the last project the focus was on creating an app the specifically works well on iPads, for this I learned using <strong>NavigationView</strong> with two views, using <strong>Alerts</strong> and <strong>Sheets</strong> with optionals and using <strong>Groups</strong> as transparent layout containers.</p><p>One thing that stood out to me was the last wrap up challenge of adding sorting and filtering to the list which sounded intimidating at first, but was surprisingly easy to code in a <strong>swifty</strong> way.</p><h1>Day 100: Final Exam</h1><p><a href="https://oddmagnet.github.io/Images/certificate.jpg">Certificate</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://oddmagnet.github.io/blog/first-post</guid><title>My first post</title><description>A description of my first post.</description><link>https://oddmagnet.github.io/blog/first-post</link><pubDate>Thu, 30 Jul 2020 13:54:00 +0200</pubDate><content:encoded><![CDATA[<h1>My first post</h1><p>My first post's text.</p>]]></content:encoded></item></channel></rss>